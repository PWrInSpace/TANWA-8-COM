/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by pbtools.
 */

#ifndef LORA_H
#define LORA_H

#ifdef __cplusplus
extern "C" {
#endif

#include "pbtools.h"

/**
 * Message LoRaFrame.
 */
struct lo_ra_frame_repeated_t {
    int length;
    struct lo_ra_frame_t *items_p;
};

struct lo_ra_frame_t {
    struct pbtools_message_base_t base;
    uint32_t tanwa_state;
    uint32_t uptime;
    int32_t engine_work_time;
    float pressure_fuel;
    float pressure_after_fill;
    float pressure_before_fill;
    float pressure_oxy;
    float pressure_injector_fuel;
    float pressure_injector_oxi;
    float pressure_combustion_chamber;
    struct {
        bool is_present;
        bool value;
    } status_fill;
    struct {
        bool is_present;
        bool value;
    } status_depr;
    struct {
        bool is_present;
        bool value;
    } status_vent;
    struct {
        bool is_present;
        bool value;
    } status_arm;
    struct {
        bool is_present;
        bool value;
    } igniter_cont1;
    struct {
        bool is_present;
        bool value;
    } igniter_cont2;
    float tanwa_battery;
    float engine_thrust;
    float rocket_weight;
    float tank_weight;
    float temp_injector;
    float temp_combustion_chamber;
    float temp_external_tank;
    struct {
        bool is_present;
        bool value;
    } status_oxy;
    struct {
        bool is_present;
        bool value;
    } status_fuel;
};

/**
 * Message LoRaCommand.
 */
struct lo_ra_command_repeated_t {
    int length;
    struct lo_ra_command_t *items_p;
};

struct lo_ra_command_t {
    struct pbtools_message_base_t base;
    uint32_t lora_dev_id;
    uint32_t sys_dev_id;
    uint32_t command;
    int32_t payload;
};

/**
 * Message LoRaSettings.
 */
struct lo_ra_settings_repeated_t {
    int length;
    struct lo_ra_settings_t *items_p;
};

struct lo_ra_settings_t {
    struct pbtools_message_base_t base;
    int32_t lora_freq_khz;
    int32_t lora_transmit_ms;
    int32_t countdown_time;
    int32_t ingition_time;
    uint32_t flash_enable;
    uint32_t buzzer_enable;
};

/**
 * Encoding and decoding of LoRaFrame.
 */
struct lo_ra_frame_t *
lo_ra_frame_new(
    void *workspace_p,
    size_t size);

int lo_ra_frame_encode(
    struct lo_ra_frame_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int lo_ra_frame_decode(
    struct lo_ra_frame_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of LoRaCommand.
 */
struct lo_ra_command_t *
lo_ra_command_new(
    void *workspace_p,
    size_t size);

int lo_ra_command_encode(
    struct lo_ra_command_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int lo_ra_command_decode(
    struct lo_ra_command_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of LoRaSettings.
 */
struct lo_ra_settings_t *
lo_ra_settings_new(
    void *workspace_p,
    size_t size);

int lo_ra_settings_encode(
    struct lo_ra_settings_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int lo_ra_settings_decode(
    struct lo_ra_settings_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/* Internal functions. Do not use! */

void lo_ra_frame_init(
    struct lo_ra_frame_t *self_p,
    struct pbtools_heap_t *heap_p);

void lo_ra_frame_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct lo_ra_frame_t *self_p);

void lo_ra_frame_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct lo_ra_frame_t *self_p);

void lo_ra_frame_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct lo_ra_frame_repeated_t *repeated_p);

void lo_ra_frame_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct lo_ra_frame_repeated_t *repeated_p);

void lo_ra_command_init(
    struct lo_ra_command_t *self_p,
    struct pbtools_heap_t *heap_p);

void lo_ra_command_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct lo_ra_command_t *self_p);

void lo_ra_command_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct lo_ra_command_t *self_p);

void lo_ra_command_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct lo_ra_command_repeated_t *repeated_p);

void lo_ra_command_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct lo_ra_command_repeated_t *repeated_p);

void lo_ra_settings_init(
    struct lo_ra_settings_t *self_p,
    struct pbtools_heap_t *heap_p);

void lo_ra_settings_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct lo_ra_settings_t *self_p);

void lo_ra_settings_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct lo_ra_settings_t *self_p);

void lo_ra_settings_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct lo_ra_settings_repeated_t *repeated_p);

void lo_ra_settings_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct lo_ra_settings_repeated_t *repeated_p);

#ifdef __cplusplus
}
#endif

#endif
